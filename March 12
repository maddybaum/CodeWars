/*
The 4 rules above are sufficient to determine the value of fusc for any non-negative input n. For example, let's say you want to compute fusc(10).

fusc(10) = fusc(5), by rule 3.
fusc(5) = fusc(2) + fusc(3), by rule 4.
fusc(2) = fusc(1), by rule 3.
fusc(1) = 1, by rule 2.
fusc(3) = fusc(1) + fusc(2) by rule 4.
fusc(1) and fusc(2) have already been computed are both equal to 1.
Putting these results together fusc(10) = fusc(5) = fusc(2) + fusc(3) = 1 + 2 = 3

Your job is to produce the code for the fusc function. In this kata, your function will be tested with small values of n, so you should not need to be concerned about stack overflow or timeouts.*/

public class Kata {
  public static int fusc(int n) {
    // Your code here!
    
    //if n is 0, then output is 0 if n is 1 then output is 1
    if(n == 0 || n == 1) {
      return n;
    }
    //if n is divisible by 2, return n/2 and keep going
    if(n % 2 == 0){
      return fusc(n / 2);
    }
    
    //if n is odd then split into f(n) and f(n + 1)
    else {
      //85-1 / 2 = 
      return fusc((n-1)/2) + fusc((n-1)/2 + 1);
      //for 85, should return fusc(42) + fusc(43)
    }
  }
}
